# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import simple_pb2 as simple__pb2


class SimpleRequestServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ClientSimpleSend = channel.unary_unary(
                '/petnet.simple.v1.SimpleRequestServer/ClientSimpleSend',
                request_serializer=simple__pb2.ClientSimpleSendRequest.SerializeToString,
                response_deserializer=simple__pb2.Response.FromString,
                )
        self.ClientSimpleRecv = channel.unary_unary(
                '/petnet.simple.v1.SimpleRequestServer/ClientSimpleRecv',
                request_serializer=simple__pb2.ClientSimpleRecvRequest.SerializeToString,
                response_deserializer=simple__pb2.Response.FromString,
                )
        self.ServerSimpleSend = channel.unary_unary(
                '/petnet.simple.v1.SimpleRequestServer/ServerSimpleSend',
                request_serializer=simple__pb2.ServerSimpleSendRequest.SerializeToString,
                response_deserializer=simple__pb2.Response.FromString,
                )


class SimpleRequestServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ClientSimpleSend(self, request, context):
        """client send data to local server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClientSimpleRecv(self, request, context):
        """client recv data from local server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServerSimpleSend(self, request, context):
        """local server send data to remote server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SimpleRequestServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ClientSimpleSend': grpc.unary_unary_rpc_method_handler(
                    servicer.ClientSimpleSend,
                    request_deserializer=simple__pb2.ClientSimpleSendRequest.FromString,
                    response_serializer=simple__pb2.Response.SerializeToString,
            ),
            'ClientSimpleRecv': grpc.unary_unary_rpc_method_handler(
                    servicer.ClientSimpleRecv,
                    request_deserializer=simple__pb2.ClientSimpleRecvRequest.FromString,
                    response_serializer=simple__pb2.Response.SerializeToString,
            ),
            'ServerSimpleSend': grpc.unary_unary_rpc_method_handler(
                    servicer.ServerSimpleSend,
                    request_deserializer=simple__pb2.ServerSimpleSendRequest.FromString,
                    response_serializer=simple__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'petnet.simple.v1.SimpleRequestServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SimpleRequestServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ClientSimpleSend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/petnet.simple.v1.SimpleRequestServer/ClientSimpleSend',
            simple__pb2.ClientSimpleSendRequest.SerializeToString,
            simple__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClientSimpleRecv(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/petnet.simple.v1.SimpleRequestServer/ClientSimpleRecv',
            simple__pb2.ClientSimpleRecvRequest.SerializeToString,
            simple__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServerSimpleSend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/petnet.simple.v1.SimpleRequestServer/ServerSimpleSend',
            simple__pb2.ServerSimpleSendRequest.SerializeToString,
            simple__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
